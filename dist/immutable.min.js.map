{"version":3,"file":"immutable.min.js","sources":["../src/liteEvent.ts","../src/ioc/injector.ts","../src/ioc/provider.ts","../src/services/service.ts","../src/services/decorators.ts"],"sourcesContent":["/* Lite Event exports */\r\ntype ActionsType<T> = (data?: T) => void;\r\n\r\nexport interface LiteEvent<T = void> {\r\n\ton(handler: ActionsType<T>): ActionsType<T>;\r\n\toff(handler: ActionsType<T>): void;\r\n}\r\n\r\nexport class LiteEventImpl<T = void> implements LiteEvent<T> {\r\n\tprivate handlers: ActionsType<T>[] = [];\r\n\r\n\t// on(handler: () => void): () => void;\r\n\r\n\ton(handler: ActionsType<T>) {\r\n\t\tthis.handlers.push(handler);\r\n\t\treturn handler;\r\n\t}\r\n\r\n\toff(handler: ActionsType<T>) {\r\n\t\tthis.handlers = this.handlers.filter(h => h !== handler);\r\n\t}\r\n\r\n\ttrigger(data: T) {\r\n\t\tthis.handlers.slice(0).forEach(h => h(data!));\r\n\t}\r\n}\r\n","import { Component, createContext } from 'react';\r\nimport { LiteEventImpl } from '../liteEvent';\r\nimport { logNotFoundDependency } from './errors';\r\nimport { Token } from './types';\r\n\r\n/* istanbul ignore next */\r\nexport const INJECTOR: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__injector__') as any;\r\n\r\ninterface InjectedInstance {\r\n\t[INJECTOR]?: Injector;\r\n}\r\n\r\ntype InjectorContextType = { injector?: Injector };\r\n\r\n/** React Context for Injector */\r\nexport const InjectorContext = createContext<InjectorContextType>({});\r\nif (__DEV__) {\r\n\tInjectorContext.displayName = 'InjectorContext';\r\n}\r\n\r\n/**\r\n * Dependency injection container\r\n * @internal\r\n */\r\nexport abstract class Injector<P = {}> extends Component<P> {\r\n\t_parent?: Injector;\r\n\r\n\t_bindingMap!: Map<Token, Function>;\r\n\r\n\t_instanceMap!: Map<Token, Object>;\r\n\r\n\t_childNotifications = new LiteEventImpl();\r\n\r\n\tabstract _initInstance(instance: Object): void;\r\n}\r\n\r\n/**\r\n * Find Injector for passed object and cache it inside this object\r\n * @internal\r\n * @param {Object} target The object in which we inject value\r\n * @returns {Injector}\r\n */\r\nexport function getInjector(target: Object) {\r\n\tlet injector = (target as InjectedInstance)[INJECTOR];\r\n\tif (injector) {\r\n\t\treturn injector;\r\n\t}\r\n\tinjector = currentInjector || ((target as Component).context as InjectorContextType)?.injector;\r\n\tif (injector instanceof Injector) {\r\n\t\t(target as InjectedInstance)[INJECTOR] = injector;\r\n\t\treturn injector;\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nlet currentInjector: Injector | null = null;\r\n\r\n/**\r\n * Resolve a class instance that registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @internal\r\n * @param {Injector} injector Injector instance\r\n * @param {Token} token Dependency injection token\r\n * @returns {Object} Resolved class instance\r\n */\r\nexport function getInstance(injector: Injector | undefined, token: Token) {\r\n\tif (registrationQueue.length > 0) {\r\n\t\tregistrationQueue.forEach(registration => {\r\n\t\t\tregistration();\r\n\t\t});\r\n\t\tregistrationQueue.length = 0;\r\n\t}\r\n\twhile (injector) {\r\n\t\tlet instance = injector._instanceMap.get(token)!;\r\n\t\tif (instance !== undefined) {\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t\tconst binding = injector._bindingMap.get(token);\r\n\t\tif (binding) {\r\n\t\t\tconst prevInjector = currentInjector;\r\n\t\t\tcurrentInjector = injector;\r\n\t\t\ttry {\r\n\t\t\t\tinstance = binding(injector);\r\n\t\t\t} finally {\r\n\t\t\t\tcurrentInjector = prevInjector;\r\n\t\t\t}\r\n\t\t\tinjector._instanceMap.set(token, instance);\r\n\t\t\tinjector._initInstance(instance);\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t\tinjector = injector._parent;\r\n\t}\r\n\tif (__DEV__) {\r\n\t\tlogNotFoundDependency(token);\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const registrationQueue: (() => void)[] = [];\r\n","import { createElement, ComponentType, ComponentClass, ReactNode } from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { Injector, InjectorContext, registrationQueue } from './injector';\r\nimport { addBindings } from './bindings';\r\nimport { isObject, isFunction, Definition, Token } from './types';\r\nimport { logError, getDebugName } from './errors';\r\n\r\ntype Provider = {\r\n\t/**\r\n\t * Register dependency injection bindings in scope of decorated class\r\n\t * @param definitions Dependency injection configuration\r\n\t * @returns Decorated constructor\r\n\t */\r\n\tregister(...definitions: Definition[]): void;\r\n};\r\n\r\ntype ProviderMixin<T> = T &\r\n\tProvider & {\r\n\t\tcontextType: typeof InjectorContext;\r\n\t\tWrappedComponent: T;\r\n\t};\r\n\r\nconst Initialized: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__init__') as any;\r\nexport abstract class InjectedService {\r\n\t[Initialized]?: boolean;\r\n\tabstract initProvider(refresh: () => void): void;\r\n}\r\n/**\r\n * Decorator or HOC that register dependency injection bindings\r\n * in scope of decorated class\r\n * @param definitions Dependency injection configuration\r\n * @returns Decorator or HOC\r\n */\r\nexport const provider: (...definitions: Definition[]) => <P = {}>(target: ComponentType<P>) => ProviderMixin<ComponentType<P>> = (...definitions) => Wrapped => {\r\n\tconst bindingMap = new Map<Token, Function>();\r\n\r\n\taddBindings(bindingMap, definitions);\r\n\r\n\tclass Provider extends Injector {\r\n\t\t_parent = (this.context as any)?.injector as Injector;\r\n\t\t_bindingMap = bindingMap;\r\n\t\t_instanceMap = new Map();\r\n\t\tstate = { injector: this };\r\n\r\n\t\t_initInstance(instance: Object) {\r\n\t\t\tif (instance instanceof InjectedService && !instance[Initialized]) {\r\n\t\t\t\tinstance.initProvider(() => {\r\n\t\t\t\t\tthis.setState({ injector: this });\r\n\t\t\t\t\tthis._childNotifications.trigger();\r\n\t\t\t\t});\r\n\t\t\t\tinstance[Initialized] = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcomponentDidMount() {\r\n\t\t\tthis._instanceMap.forEach(instance => {\r\n\t\t\t\tthis._initInstance(instance);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tcomponentWillUnmount() {\r\n\t\t\tthis._instanceMap.forEach(instance => {\r\n\t\t\t\tif (isObject(instance) && isFunction(instance.dispose)) {\r\n\t\t\t\t\tinstance.dispose();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\trender(): ReactNode {\r\n\t\t\treturn createElement(InjectorContext.Provider, { value: this.state }, createElement(Wrapped, this.props as any));\r\n\t\t}\r\n\r\n\t\tstatic WrappedComponent = Wrapped;\r\n\r\n\t\t/**\r\n\t\t * Register dependency injection bindings in scope of decorated class\r\n\t\t * @param {...Definition} definitions Dependency injection configuration\r\n\t\t */\r\n\t\tstatic register(...definitions: Definition[]) {\r\n\t\t\taddBindings(bindingMap, definitions);\r\n\t\t}\r\n\t}\r\n\r\n\tif (__DEV__) {\r\n\t\t(Provider as ComponentClass).displayName = `Provider(${Wrapped.displayName || Wrapped.name})`;\r\n\r\n\t\tObject.defineProperty(Provider, 'contextType', {\r\n\t\t\tget() {\r\n\t\t\t\treturn InjectorContext;\r\n\t\t\t},\r\n\t\t\tset() {\r\n\t\t\t\tlogError(`You are trying to overwrite ${(Provider as ComponentClass).displayName}.contextType = InjectorContext`);\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\tProvider.contextType = InjectorContext;\r\n\t}\r\n\r\n\t// static fields from component should be visible on the generated Consumer\r\n\treturn hoistNonReactStatics(Provider as unknown as ComponentType<any>, Wrapped) as any;\r\n};\r\n\r\n/**\r\n * Decorator that lazily registers class in scope of specified Provider.\r\n * @param getProvider Lambda function that returns Provider\r\n * @param biding Dependency injection binding\r\n * @returns Decorator\r\n */\r\n\r\nexport const registerIn: <T extends Function>(getProvider: () => Provider, binding?: Function) => (target: T) => T = (getProvider, binding) => constructor => {\r\n\tregistrationQueue.push(() => {\r\n\t\tif (__DEV__) {\r\n\t\t\tconst provider = getProvider();\r\n\t\t\tif (!isFunction(provider) || !(provider.prototype instanceof Injector)) {\r\n\t\t\t\tlogError(`${getDebugName(provider)} is not a valid Provider. Please use:\\n` + `@registerIn(() => MyProvider)\\n` + `class ${getDebugName(constructor)} {}\\n`);\r\n\t\t\t} else {\r\n\t\t\t\tprovider.register(binding ? [constructor, binding] : constructor);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tgetProvider().register(binding ? [constructor, binding] : constructor);\r\n\t\t}\r\n\t});\r\n\treturn constructor;\r\n};\r\n","import { Draft, createDraft, finishDraft, immerable } from 'immer';\r\nimport { logError } from '../ioc/errors';\r\nimport { InjectedService } from '../ioc/provider';\r\n\r\nexport const PROVIDER: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__store__') as any;\r\nexport const STORES: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__stores__') as any;\r\nexport const REFRESH: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__refresh__') as any;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface ImmutableServiceInternal {\r\n\t[REFRESH]?: () => void;\r\n\t[PROVIDER]: MutationProvider;\r\n\t[STORES]: string[];\r\n\t[index: string]: any;\r\n\tRefreshContext(): void;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\n\r\nclass MutationProvider {\r\n\tprivate count = 0;\r\n\tprivate draft?: Draft<ImmutableServiceInternal>;\r\n\tprivate service: ImmutableServiceInternal;\r\n\tconstructor(service: ImmutableService) {\r\n\t\tthis.service = (service as unknown) as ImmutableServiceInternal;\r\n\t}\r\n\tstart(inc = true) {\r\n\t\tif (this.count == 0) {\r\n\t\t\tconst draft = (this.draft = this.draft ?? createDraft(this.service));\r\n\r\n\t\t\tthis.service[STORES].forEach(x => {\r\n\t\t\t\tthis.service[x] = draft[x];\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (inc) this.count++;\r\n\t}\r\n\tfinish(refresh: boolean = true, dec = true) {\r\n\t\tif (this.count == 0) {\r\n\t\t\tconsole.warn('the finish method must be called after corresponding start method');\r\n\t\t} else {\r\n\t\t\tif (dec) this.count--;\r\n\t\t\tif (this.count == 0) {\r\n\t\t\t\tconst draft = this.draft;\r\n\t\t\t\tif (draft) {\r\n\t\t\t\t\tthis.service[STORES].forEach(x => {\r\n\t\t\t\t\t\tdraft[x] = this.service[x];\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconst newstate = finishDraft(draft);\r\n\t\t\t\t\tthis.service[STORES].forEach(x => {\r\n\t\t\t\t\t\tthis.service[x] = newstate[x];\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis.draft = undefined;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (__DEV__) {\r\n\t\t\t\t\t\tlogError('previous state is absent');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (refresh) {\r\n\t\t\tthis.service.RefreshContext();\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// @ts-ignore\r\nexport abstract class ImmutableService extends InjectedService {\r\n\tprivate [REFRESH]: (() => void) | undefined;\r\n\t// @ts-ignore\r\n\tprivate [STORES]: string[];\r\n\t// @ts-ignore\r\n\tprivate [PROVIDER]: MutationProvider;\r\n\t// @ts-ignore\r\n\tprivate [immerable]: boolean;\r\n\r\n\t// @ts-ignore\r\n\tprivate initProvider(refresh: () => void) {\r\n\t\tthis[REFRESH] = refresh;\r\n\t\tthis[PROVIDER].start();\r\n\t\tthis[PROVIDER].finish();\r\n\t}\r\n\r\n\tprotected RefreshContext() {\r\n\t\tif (this[REFRESH]) {\r\n\t\t\tthis[REFRESH]();\r\n\t\t}\r\n\t}\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\t// @ts-ignore\r\n\t\tthis[STORES] = this[STORES] ?? [];\r\n\t\tthis[immerable] = true;\r\n\t\tthis[PROVIDER] = new MutationProvider(this);\r\n\t}\r\n\r\n\tprotected async waitForAsync<T>(promise: Promise<T>) {\r\n\t\tthis[PROVIDER].finish(true, false);\r\n\t\ttry {\r\n\t\t\treturn await promise;\r\n\t\t} finally {\r\n\t\t\tthis[PROVIDER].start(false);\r\n\t\t}\r\n\t}\r\n}\r\n","import { ImmutableServiceInternal, ImmutableService, STORES, PROVIDER } from './service';\r\n\r\n/**\r\n * Property Decorator convert property to immutable\r\n * Changes for such property allowed only from methods marked with @action or @asyncAction decorator\r\n */\r\nexport function store() {\r\n\treturn function(target: ImmutableService, propertyKey: string) {\r\n\t\tconst service = (target as unknown) as ImmutableServiceInternal;\r\n\t\tservice[STORES] = service[STORES] ?? [];\r\n\t\tservice[STORES].push(propertyKey);\r\n\t};\r\n}\r\n\r\n/**\r\n * Method decorator allow to change properties marked with @store within method.\r\n * After method execution, the React Context in which the service is located will be updated\r\n */\r\n// export function asyncAction() {\r\n// \treturn function(target: ImmutableService, propertyKey: string, descriptor: PropertyDescriptor) {\r\n// \t\tconst fn = descriptor.value as Function;\r\n// \t\tdescriptor.value = async function(args: any[]) {\r\n// \t\t\t(this as ImmutableServiceInternal)[PROVIDER].start();\r\n// \t\t\tlet res = undefined;\r\n// \t\t\ttry {\r\n// \t\t\t\tres = await fn.call(this, args);\r\n// \t\t\t} finally {\r\n// \t\t\t\t(this as ImmutableServiceInternal)[PROVIDER].finish();\r\n// \t\t\t}\r\n\r\n// \t\t\treturn res;\r\n// \t\t};\r\n// \t};\r\n// }\r\n\r\nconst waitForFinish = async (service: ImmutableServiceInternal, promise: Promise<any>) => {\r\n\ttry {\r\n\t\treturn await promise;\r\n\t} finally {\r\n\t\tservice[PROVIDER].finish();\r\n\t}\r\n};\r\nconst checkForPromise = (value: any) => {\r\n\t//return value instanceof Promise\r\n\treturn value && typeof value['then'] === 'function';\r\n};\r\n/**\r\n * Method decorator allow to change properties marked with @store within method.\r\n * After method execution, the React Context in which the service is located will be updated\r\n */\r\nexport function action() {\r\n\treturn function(_target: ImmutableService, _propertyKey: string, descriptor: PropertyDescriptor) {\r\n\t\tconst fn = descriptor.value as Function;\r\n\t\tdescriptor.value = function(args: any[]) {\r\n\t\t\t(this as ImmutableServiceInternal)[PROVIDER].start();\r\n\r\n\t\t\tlet isPromise = false;\r\n\t\t\ttry {\r\n\t\t\t\tlet res = fn.call(this, args);\r\n\t\t\t\tisPromise = checkForPromise(res);\r\n\t\t\t\tif (isPromise) {\r\n\t\t\t\t\treturn waitForFinish(this as ImmutableServiceInternal, res);\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn res;\r\n\t\t\t\t}\r\n\t\t\t} finally {\r\n\t\t\t\tif (!isPromise) {\r\n\t\t\t\t\t(this as ImmutableServiceInternal)[PROVIDER].finish();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n}\r\n"],"names":["LiteEventImpl","this","handlers","prototype","on","handler","push","off","filter","h","trigger","data","slice","forEach","createContext","_super","Injector","_this","apply","arguments","_childNotifications","__extends","Component","InjectedService","PROVIDER","Symbol","STORES","REFRESH","MutationProvider","service","count","start","inc","draft_1","draft","_a","createDraft","x","finish","refresh","dec","console","warn","draft_2","newstate_1","finishDraft","undefined","RefreshContext","ImmutableService","call","immerable","initProvider","waitForAsync","promise","store","target","propertyKey","waitForFinish","__awaiter","checkForPromise","value","action","_target","_propertyKey","descriptor","fn","args","isPromise","res"],"mappings":"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"}