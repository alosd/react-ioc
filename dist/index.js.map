{"version":3,"file":"index.js","sources":["../src/liteEvent.ts","../src/ioc/types.ts","../src/ioc/errors.ts","../src/ioc/injector.ts","../src/ioc/inject.ts","../src/ioc/bindings.ts","../src/ioc/provider.ts","../src/ioc/hooks.ts","../src/componentWithService.ts"],"sourcesContent":["/* Lite Event exports */\r\ntype ActionsType<T> = (data?: T) => void;\r\n\r\nexport interface LiteEvent<T = void> {\r\n\ton(handler: ActionsType<T>): ActionsType<T>;\r\n\toff(handler: ActionsType<T>): void;\r\n}\r\n\r\nexport class LiteEventImpl<T = void> implements LiteEvent<T> {\r\n\tprivate handlers: ActionsType<T>[] = [];\r\n\r\n\t// on(handler: () => void): () => void;\r\n\r\n\ton(handler: ActionsType<T>) {\r\n\t\tthis.handlers.push(handler);\r\n\t\treturn handler;\r\n\t}\r\n\r\n\toff(handler: ActionsType<T>) {\r\n\t\tthis.handlers = this.handlers.filter(h => h !== handler);\r\n\t}\r\n\r\n\ttrigger(data: T) {\r\n\t\tthis.handlers.slice(0).forEach(h => h(data!));\r\n\t}\r\n}\r\n","export type Token = Function | Object | string | symbol;\r\nexport type DefinitionObject = { token: Token; binding: Function };\r\nexport type Definition = Function | [Function] | [Token, Function] | DefinitionObject;\r\n\r\nexport type Constructor<T> = new (...args: any[]) => T;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isFunction(arg: any): arg is Function {\r\n\treturn typeof arg === 'function';\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isObject(arg: any): arg is Object {\r\n\treturn arg && typeof arg === 'object';\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isString(arg: any): arg is string {\r\n\treturn typeof arg === 'string';\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isSymbol(arg: any): arg is symbol {\r\n\treturn typeof arg === 'symbol';\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isToken(arg: any): arg is Token {\r\n\treturn isFunction(arg) || isObject(arg) || isString(arg) || isSymbol(arg);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isReactComponent(prototype: any) {\r\n\treturn isObject(prototype) && isObject(prototype.isReactComponent);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isValidMetadata(arg: any): arg is Function {\r\n\treturn isFunction(arg) && [Object, Function, Number, String, Boolean].indexOf(arg) === -1;\r\n}\r\n","import { isFunction, isObject, isReactComponent, Token } from './types';\r\nimport { FunctionComponent, Component } from 'react';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function getDebugName(value: FunctionComponent | Component | Object) {\r\n\tif (isFunction(value)) {\r\n\t\treturn String(value.displayName || value.name);\r\n\t}\r\n\tif (isObject(value) && isFunction(value.constructor)) {\r\n\t\treturn String(value.constructor.name);\r\n\t}\r\n\treturn String(value);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function logError(message?: string) {\r\n\ttry {\r\n\t\tthrow new Error(message);\r\n\t} catch (e) {\r\n\t\tconsole.error(e);\r\n\t}\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function logIncorrectBinding(token: Token, binding: Function | Object) {\r\n\tconst tokenName = getDebugName(token);\r\n\tconst bindingName = getDebugName(binding);\r\n\tlogError(`Binding [${tokenName}, ${bindingName}] is incorrect.`);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function logNotFoundDependency(token: Token) {\r\n\tconst name = getDebugName(token);\r\n\tlogError(\r\n\t\t`Dependency ${name} is not found.\r\nPlease register ${name} in some Provider e.g.\r\n@provider([${name}, ${name}])\r\nclass App extends React.Component { /*...*/ }`\r\n\t);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function logNotFoundProvider(target?: Object) {\r\n\tif (isReactComponent(target)) {\r\n\t\tconst name = getDebugName(target!);\r\n\t\tlogError(\r\n\t\t\t`Provider is not found.\r\n  Please define Provider and set ${name}.contextType = InjectorContext e.g.\r\n  @provider([MyService, MyService])\r\n  class App extends React.Component { /*...*/ }\r\n  class ${name} extends React.Component {\r\n    static contextType = InjectorContext;\r\n  }`\r\n\t\t);\r\n\t} else {\r\n\t\tlogError(\r\n\t\t\t`Provider is not found.\r\n  Please define Provider e.g.\r\n  @provider([MyService, MyService])\r\n  class App extends React.Component { /*...*/ }`\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function logInvalidMetadata(target: Object, token: Token) {\r\n\tconst tokenName = getDebugName(token);\r\n\tconst targetName = getDebugName(target);\r\n\tlogError(\r\n\t\t`${tokenName} is not a valid dependency.\r\nPlease specify ES6 class as property type e.g.\r\nclass MyService {}\r\nclass ${targetName} {\r\n  @inject myService: MyService;\r\n}`\r\n\t);\r\n}\r\n","import { Component, createContext } from 'react';\r\nimport { LiteEventImpl } from '../liteEvent';\r\nimport { logNotFoundDependency } from './errors';\r\nimport { Token } from './types';\r\n\r\n/* istanbul ignore next */\r\nexport const INJECTOR: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__injector__') as any;\r\n\r\ninterface InjectedInstance {\r\n\t[INJECTOR]?: Injector;\r\n}\r\n\r\ntype InjectorContextType = { injector?: Injector };\r\n\r\n/** React Context for Injector */\r\nexport const InjectorContext = createContext<InjectorContextType>({});\r\nif (__DEV__) {\r\n\tInjectorContext.displayName = 'InjectorContext';\r\n}\r\n\r\n/**\r\n * Dependency injection container\r\n * @internal\r\n */\r\nexport abstract class Injector<P = {}> extends Component<P> {\r\n\t_parent?: Injector;\r\n\r\n\t_bindingMap!: Map<Token, Function>;\r\n\r\n\t_instanceMap!: Map<Token, Object>;\r\n\r\n\t_childNotifications = new LiteEventImpl();\r\n\r\n\tabstract _initInstance(instance: Object): void;\r\n}\r\n\r\n/**\r\n * Find Injector for passed object and cache it inside this object\r\n * @internal\r\n * @param {Object} target The object in which we inject value\r\n * @returns {Injector}\r\n */\r\nexport function getInjector(target: Object) {\r\n\tlet injector = (target as InjectedInstance)[INJECTOR];\r\n\tif (injector) {\r\n\t\treturn injector;\r\n\t}\r\n\tinjector = currentInjector || ((target as Component).context as InjectorContextType)?.injector;\r\n\tif (injector instanceof Injector) {\r\n\t\t(target as InjectedInstance)[INJECTOR] = injector;\r\n\t\treturn injector;\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nlet currentInjector: Injector | null = null;\r\n\r\n/**\r\n * Resolve a class instance that registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @internal\r\n * @param {Injector} injector Injector instance\r\n * @param {Token} token Dependency injection token\r\n * @returns {Object} Resolved class instance\r\n */\r\nexport function getInstance(injector: Injector | undefined, token: Token) {\r\n\tif (registrationQueue.length > 0) {\r\n\t\tregistrationQueue.forEach(registration => {\r\n\t\t\tregistration();\r\n\t\t});\r\n\t\tregistrationQueue.length = 0;\r\n\t}\r\n\twhile (injector) {\r\n\t\tlet instance = injector._instanceMap.get(token)!;\r\n\t\tif (instance !== undefined) {\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t\tconst binding = injector._bindingMap.get(token);\r\n\t\tif (binding) {\r\n\t\t\tconst prevInjector = currentInjector;\r\n\t\t\tcurrentInjector = injector;\r\n\t\t\ttry {\r\n\t\t\t\tinstance = binding(injector);\r\n\t\t\t} finally {\r\n\t\t\t\tcurrentInjector = prevInjector;\r\n\t\t\t}\r\n\t\t\tinjector._instanceMap.set(token, instance);\r\n\t\t\tinjector._initInstance(instance);\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t\tinjector = injector._parent;\r\n\t}\r\n\tif (__DEV__) {\r\n\t\tlogNotFoundDependency(token);\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const registrationQueue: (() => void)[] = [];\r\n","import 'reflect-metadata';\r\nimport { InjectorContext, getInjector, getInstance } from './injector';\r\nimport { isValidMetadata, isReactComponent, isFunction, Constructor, Token } from './types';\r\nimport { getDebugName, logInvalidMetadata, logNotFoundProvider, logError } from './errors';\r\nimport { ComponentClass } from 'react';\r\n\r\n/**\r\n * Property decorator that resolves a class instance\r\n * which registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @param token Dependency injection token\r\n * @returns Property decorator\r\n */\r\nexport function inject(token?: Token): PropertyDecorator;\r\n\r\n/**\r\n * Property decorator that resolves a class instance\r\n * which registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n */\r\nexport function inject(target: Object, key: string | symbol): void;\r\n/**\r\n * Create a class instance that registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @param target The object in which we inject class instance\r\n * @param token Dependency injection token\r\n * @returns Resolved class instance\r\n */\r\nexport function inject<T>(target: Object, token: Constructor<T> | Token): T;\r\n\r\nexport function inject<T>(targetOrToken?: Object | Token, keyOrToken?: string | symbol | Token | Constructor<T>) {\r\n\tif (isFunction(keyOrToken)) {\r\n\t\treturn injectFunction(targetOrToken as Object, keyOrToken);\r\n\t}\r\n\r\n\tlet token = targetOrToken as Object;\r\n\tif (!keyOrToken) {\r\n\t\treturn injectDecorator;\r\n\t}\r\n\treturn injectDecorator(token, keyOrToken as string | symbol);\r\n\r\n\tfunction injectDecorator(prototype: Object, key: string | symbol) {\r\n\t\tif (__DEV__) {\r\n\t\t\tdefineContextType(prototype);\r\n\t\t} else {\r\n\t\t\t(prototype.constructor as ComponentClass).contextType = InjectorContext;\r\n\t\t}\r\n\r\n\t\tif (!token) {\r\n\t\t\ttoken = Reflect.getMetadata('design:type', prototype, key);\r\n\t\t\tif (__DEV__) {\r\n\t\t\t\tif (!isValidMetadata(token)) {\r\n\t\t\t\t\tlogInvalidMetadata(targetOrToken as Object, token);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst descriptor = {\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: true,\r\n\t\t\tget() {\r\n\t\t\t\tconst instance = injectFunction(this, token);\r\n\t\t\t\tObject.defineProperty(this, key, {\r\n\t\t\t\t\tenumerable: true,\r\n\t\t\t\t\twritable: true,\r\n\t\t\t\t\tvalue: instance\r\n\t\t\t\t});\r\n\t\t\t\treturn instance;\r\n\t\t\t},\r\n\t\t\tset(instance: Object) {\r\n\t\t\t\tObject.defineProperty(this, key, {\r\n\t\t\t\t\tenumerable: true,\r\n\t\t\t\t\twritable: true,\r\n\t\t\t\t\tvalue: instance\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tObject.defineProperty(prototype, key, descriptor);\r\n\r\n\t\treturn descriptor;\r\n\t}\r\n}\r\n\r\n/**\r\n * Resolve a class instance that registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @internal\r\n * @param {Object} target The object in which we inject class instance\r\n * @param {Token} token Dependency injection token\r\n * @returns {Object} Resolved class instance\r\n */\r\nfunction injectFunction(target: Object, token: Token) {\r\n\tconst injector = getInjector(target);\r\n\tif (__DEV__) {\r\n\t\tif (!injector) {\r\n\t\t\tlogNotFoundProvider(target);\r\n\t\t}\r\n\t}\r\n\treturn getInstance(injector, token);\r\n}\r\n\r\n/**\r\n * Set Class.contextType = InjectorContext\r\n * @internal\r\n * @param {Object} prototype React Component prototype\r\n */\r\nfunction defineContextType(prototype: Object) {\r\n\tif (isReactComponent(prototype)) {\r\n\t\tconst constructor = prototype.constructor;\r\n\t\tconst className = getDebugName(constructor);\r\n\t\tif ((constructor as ComponentClass).contextType !== InjectorContext) {\r\n\t\t\tif ((constructor as ComponentClass).contextType) {\r\n\t\t\t\tlogError(`Decorator tries to overwrite existing ${className}.contextType`);\r\n\t\t\t} else {\r\n\t\t\t\tObject.defineProperty(constructor, 'contextType', {\r\n\t\t\t\t\tget() {\r\n\t\t\t\t\t\treturn InjectorContext;\r\n\t\t\t\t\t},\r\n\t\t\t\t\tset() {\r\n\t\t\t\t\t\tlogError(`You are trying to overwrite ${className}.contextType = InjectorContext`);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import { INJECTOR, getInstance, Injector } from './injector';\r\nimport { isFunction, isToken, Token, Constructor, Definition, DefinitionObject } from './types';\r\nimport { logIncorrectBinding, logError, getDebugName } from './errors';\r\n\r\nconst IS_BINDING: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__binding__') as any;\r\ninterface BindingMark {\r\n\t[IS_BINDING]?: boolean;\r\n}\r\ntype BindingFunction = ((injector: Injector) => any) & BindingMark;\r\n\r\ninterface InjectedInstance {\r\n\t[INJECTOR]?: Injector;\r\n}\r\n/**\r\n * Bind type to specified class.\r\n * @param constructor Service constructor\r\n * @returns Dependency resolver\r\n */\r\nexport function toClass<T>(constructor: Constructor<T>) {\r\n\tif (__DEV__) {\r\n\t\tif (!isFunction(constructor)) {\r\n\t\t\tlogError(`Class ${getDebugName(constructor)} is not a valid dependency`);\r\n\t\t}\r\n\t}\r\n\treturn asBinding(injector => {\r\n\t\tconst instance = new constructor() as InjectedInstance;\r\n\t\tif (!instance[INJECTOR]) {\r\n\t\t\tinstance[INJECTOR] = injector;\r\n\t\t}\r\n\t\treturn instance;\r\n\t});\r\n}\r\n\r\n/**\r\n * Bind dependency to specified factory funciton.\r\n * @param factory Factory\r\n * @returns Dependency resolver\r\n */\r\nexport function toFactory<T>(factory: () => T): Function;\r\n/**\r\n * Bind dependency to specified factory funciton.\r\n * @param deps Factory dependencies\r\n * @param factory Factory\r\n * @returns Dependency resolver\r\n */\r\nexport function toFactory<T extends [any, ...any[]]>(deps: { [K in keyof T]: Constructor<T[K]> | Token }, factory: (...args: T) => any): Function;\r\nexport function toFactory(depsOrFactory?: any, factory?: any) {\r\n\tif (__DEV__) {\r\n\t\tif (factory) {\r\n\t\t\tif (!Array.isArray(depsOrFactory)) {\r\n\t\t\t\tlogError(`Dependency array ${getDebugName(depsOrFactory)} is invalid`);\r\n\t\t\t}\r\n\t\t\tif (!isFunction(factory)) {\r\n\t\t\t\tlogError(`Factory ${getDebugName(factory)} is not a valid dependency`);\r\n\t\t\t}\r\n\t\t} else if (!isFunction(depsOrFactory)) {\r\n\t\t\tlogError(`Factory ${getDebugName(depsOrFactory)} is not a valid dependency`);\r\n\t\t}\r\n\t}\r\n\treturn asBinding(factory ? injector => factory(...depsOrFactory.map((token: Token) => getInstance(injector, token))) : depsOrFactory);\r\n}\r\n\r\n/**\r\n * Bind type to specified value.\r\n * @param  value\r\n * @returns Dependency resolver\r\n */\r\nexport function toValue(value: any) {\r\n\tif (__DEV__) {\r\n\t\tif (value === undefined) {\r\n\t\t\tlogError(`Please specify some value`);\r\n\t\t}\r\n\t}\r\n\treturn asBinding(() => value);\r\n}\r\n\r\n/**\r\n * Bind type to existing instance located by token.\r\n * @param {Token} token\r\n * @return Dependency resolver\r\n */\r\nexport function toExisting(token: Token) {\r\n\tif (__DEV__) {\r\n\t\tif (!isFunction(token)) {\r\n\t\t\tlogError(`Token ${getDebugName(token)} is not a valid dependency injection token`);\r\n\t\t}\r\n\t}\r\n\treturn asBinding(injector => getInstance(injector, token));\r\n}\r\n\r\n/**\r\n * Mark function as binding function.\r\n * @internal\r\n * @param {Function} binding\r\n * @returns {Function}\r\n */\r\nfunction asBinding(binding: BindingFunction): Function {\r\n\tbinding[IS_BINDING] = true;\r\n\treturn binding;\r\n}\r\n\r\n/**\r\n * Add bindings to bindings Map\r\n * @internal\r\n */\r\nexport function addBindings(bindingMap: Map<Token, Function>, definitions: Definition[]) {\r\n\tdefinitions.forEach(definition => {\r\n\t\tlet token, binding;\r\n\t\tif (typeof definition == 'object' && (definition as DefinitionObject).token && (definition as DefinitionObject).binding) {\r\n\t\t\ttoken = (definition as DefinitionObject).token;\r\n\t\t\tbinding = (definition as DefinitionObject).binding;\r\n\t\t}\r\n\t\tif (Array.isArray(definition)) {\r\n\t\t\t[token, binding = token] = definition;\r\n\t\t} else {\r\n\t\t\ttoken = binding = definition;\r\n\t\t}\r\n\t\tif (__DEV__) {\r\n\t\t\tif (!isToken(token) || !isFunction(binding)) {\r\n\t\t\t\tlogIncorrectBinding(token, binding as Object);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// @ts-ignore\r\n\t\tbindingMap.set(token, binding[IS_BINDING] ? binding : toClass(binding));\r\n\t});\r\n}\r\n","import { createElement, ComponentType, ComponentClass, ReactNode } from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { Injector, InjectorContext, registrationQueue } from './injector';\r\nimport { addBindings } from './bindings';\r\nimport { isObject, isFunction, Definition, Token } from './types';\r\nimport { logError, getDebugName } from './errors';\r\n\r\ntype Provider = {\r\n\t/**\r\n\t * Register dependency injection bindings in scope of decorated class\r\n\t * @param definitions Dependency injection configuration\r\n\t * @returns Decorated constructor\r\n\t */\r\n\tregister(...definitions: Definition[]): void;\r\n};\r\n\r\ntype ProviderMixin<T> = T &\r\n\tProvider & {\r\n\t\tcontextType: typeof InjectorContext;\r\n\t\tWrappedComponent: T;\r\n\t};\r\n\r\nconst Initialized: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__init__') as any;\r\nexport abstract class InjectedService {\r\n\t[Initialized]?: boolean;\r\n\tabstract initProvider(refresh: () => void): void;\r\n}\r\n/**\r\n * Decorator or HOC that register dependency injection bindings\r\n * in scope of decorated class\r\n * @param definitions Dependency injection configuration\r\n * @returns Decorator or HOC\r\n */\r\nexport const provider: (...definitions: Definition[]) => <P = {}>(target: ComponentType<P>) => ProviderMixin<ComponentType<P>> = (...definitions) => Wrapped => {\r\n\tconst bindingMap = new Map<Token, Function>();\r\n\r\n\taddBindings(bindingMap, definitions);\r\n\r\n\tclass Provider extends Injector {\r\n\t\t_parent = (this.context as any)?.injector as Injector;\r\n\t\t_bindingMap = bindingMap;\r\n\t\t_instanceMap = new Map();\r\n\t\tstate = { injector: this };\r\n\r\n\t\t_initInstance(instance: Object) {\r\n\t\t\tif (instance instanceof InjectedService && !instance[Initialized]) {\r\n\t\t\t\tinstance.initProvider(() => {\r\n\t\t\t\t\tthis.setState({ injector: this });\r\n\t\t\t\t\tthis._childNotifications.trigger();\r\n\t\t\t\t});\r\n\t\t\t\tinstance[Initialized] = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcomponentDidMount() {\r\n\t\t\tthis._instanceMap.forEach(instance => {\r\n\t\t\t\tthis._initInstance(instance);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tcomponentWillUnmount() {\r\n\t\t\tthis._instanceMap.forEach(instance => {\r\n\t\t\t\tif (isObject(instance) && isFunction(instance.dispose)) {\r\n\t\t\t\t\tinstance.dispose();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\trender(): ReactNode {\r\n\t\t\treturn createElement(InjectorContext.Provider, { value: this.state }, createElement(Wrapped, this.props as any));\r\n\t\t}\r\n\r\n\t\tstatic WrappedComponent = Wrapped;\r\n\r\n\t\t/**\r\n\t\t * Register dependency injection bindings in scope of decorated class\r\n\t\t * @param {...Definition} definitions Dependency injection configuration\r\n\t\t */\r\n\t\tstatic register(...definitions: Definition[]) {\r\n\t\t\taddBindings(bindingMap, definitions);\r\n\t\t}\r\n\t}\r\n\r\n\tif (__DEV__) {\r\n\t\t(Provider as ComponentClass).displayName = `Provider(${Wrapped.displayName || Wrapped.name})`;\r\n\r\n\t\tObject.defineProperty(Provider, 'contextType', {\r\n\t\t\tget() {\r\n\t\t\t\treturn InjectorContext;\r\n\t\t\t},\r\n\t\t\tset() {\r\n\t\t\t\tlogError(`You are trying to overwrite ${(Provider as ComponentClass).displayName}.contextType = InjectorContext`);\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\tProvider.contextType = InjectorContext;\r\n\t}\r\n\r\n\t// static fields from component should be visible on the generated Consumer\r\n\treturn hoistNonReactStatics(Provider as unknown as ComponentType<any>, Wrapped) as any;\r\n};\r\n\r\n/**\r\n * Decorator that lazily registers class in scope of specified Provider.\r\n * @param getProvider Lambda function that returns Provider\r\n * @param biding Dependency injection binding\r\n * @returns Decorator\r\n */\r\n\r\nexport const registerIn: <T extends Function>(getProvider: () => Provider, binding?: Function) => (target: T) => T = (getProvider, binding) => constructor => {\r\n\tregistrationQueue.push(() => {\r\n\t\tif (__DEV__) {\r\n\t\t\tconst provider = getProvider();\r\n\t\t\tif (!isFunction(provider) || !(provider.prototype instanceof Injector)) {\r\n\t\t\t\tlogError(`${getDebugName(provider)} is not a valid Provider. Please use:\\n` + `@registerIn(() => MyProvider)\\n` + `class ${getDebugName(constructor)} {}\\n`);\r\n\t\t\t} else {\r\n\t\t\t\tprovider.register(binding ? [constructor, binding] : constructor);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tgetProvider().register(binding ? [constructor, binding] : constructor);\r\n\t\t}\r\n\t});\r\n\treturn constructor;\r\n};\r\n","import { useContext, useEffect, useRef, useState } from 'react';\r\nimport { InjectorContext, getInstance, Injector } from './injector';\r\nimport { logNotFoundProvider } from './errors';\r\nimport { Token } from './types';\r\n\r\n/**\r\n * React hook for resolving a class instance that registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @param  token Dependency injection token\r\n * @returns Resolved class instance\r\n */\r\nexport function useInstance(token: Token) {\r\n\tconst ref = useRef<Object | undefined>(undefined);\r\n\tconst injector = useContext(InjectorContext)?.injector;\r\n\tif (__DEV__) {\r\n\t\tif (!injector) {\r\n\t\t\tlogNotFoundProvider();\r\n\t\t}\r\n\t}\r\n\tconst result = ref.current || (ref.current = getInstance(injector, token));\r\n\r\n\tconst [, updater] = useState({});\r\n\tconst refUpd = useRef({ updater });\r\n\tuseEffect(() => {\r\n\t\t// if token found in nearest provider - no update is required - useContext already invoke rerender,\r\n\t\t// otherwise we should manually refresh component\r\n\t\tlet event: () => void;\r\n\t\tlet publisher: Injector;\r\n\t\tif (injector && result) {\r\n\t\t\tif (!injector._instanceMap.has(token)) {\r\n\t\t\t\tlet i = injector._parent;\r\n\t\t\t\twhile (i) {\r\n\t\t\t\t\tif (i._instanceMap.has(token)) {\r\n\t\t\t\t\t\tpublisher = i;\r\n\t\t\t\t\t\tevent = i._childNotifications.on(() => refUpd.current.updater({}));\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti = i._parent;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn () => {\r\n\t\t\trefUpd.current.updater = () => {};\r\n\t\t\tif (publisher) {\r\n\t\t\t\tpublisher._childNotifications.off(event);\r\n\t\t\t}\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * React hook for resolving a class instances that registered by some Provider in hierarchy.\r\n * Instances are cached in Provider that registers it's classes.\r\n * @param  tokens Dependency injection tokens\r\n * @returns Resolved class instances\r\n */\r\nexport function useInstances(...tokens: Token[]) {\r\n\tconst ref = useRef<(Object | undefined)[] | null>(null);\r\n\tconst injector = useContext(InjectorContext)?.injector;\r\n\tif (__DEV__) {\r\n\t\tif (!injector) {\r\n\t\t\tlogNotFoundProvider();\r\n\t\t}\r\n\t}\r\n\r\n\tconst result = ref.current || (ref.current = tokens.map(token => getInstance(injector, token)));\r\n\r\n\tconst [, updater] = useState({});\r\n\tconst refUpd = useRef({ updater });\r\n\tuseEffect(() => {\r\n\t\t// if token found in nearest provider - no update is required - useContext already invoke rerender,\r\n\t\t// otherwise we should manually refresh component\r\n\t\tconst subscriptions: { event: () => void; publisher: Injector }[] = [];\r\n\r\n\t\tif (injector) {\r\n\t\t\ttokens.forEach(token => {\r\n\t\t\t\tif (!injector._instanceMap.has(token)) {\r\n\t\t\t\t\tlet i = injector._parent;\r\n\t\t\t\t\twhile (i) {\r\n\t\t\t\t\t\tif (i._instanceMap.has(token)) {\r\n\t\t\t\t\t\t\tsubscriptions.push({\r\n\t\t\t\t\t\t\t\tpublisher: i,\r\n\t\t\t\t\t\t\t\tevent: i._childNotifications.on(() => refUpd.current.updater({}))\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\ti = i._parent;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn () => {\r\n\t\t\trefUpd.current.updater = () => {};\r\n\t\t\tsubscriptions.forEach(s => s.publisher._childNotifications.off(s.event));\r\n\t\t};\r\n\t}, []);\r\n\treturn result;\r\n}\r\n","import { createElement, FC, /* useCallback, DependencyList, */ useRef, Fragment, PropsWithChildren } from 'react';\r\nimport { Definition } from './ioc/types';\r\nimport { provider } from './ioc';\r\n\r\nconst ComponentWithService: FC<PropsWithChildren> = ({ children }) => createElement(Fragment, null, children);\r\n\r\nexport const ComponentWithServices: FC<PropsWithChildren<{\r\n\tservices: Definition[];\r\n}>> = ({ services, children }) => {\r\n\tconst ref = useRef(provider(...services)(ComponentWithService));\r\n\treturn createElement(ref.current, null, children);\r\n};\r\n"],"names":["createContext","__extends","Component","createElement","hoistNonReactStatics","useRef","useContext","useState","useEffect","Fragment"],"mappings":"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"}