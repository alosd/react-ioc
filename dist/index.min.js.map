{"version":3,"file":"index.min.js","sources":["../src/ioc/types.ts","../src/ioc/injector.ts","../src/ioc/inject.ts","../src/ioc/bindings.ts","../src/ioc/provider.ts","../src/ioc/hooks.ts","../src/componentWithService.ts"],"sourcesContent":["export type Token = Function | Object | string | symbol;\r\nexport type DefinitionObject = { token: Token; binding: Function };\r\nexport type Definition = Function | [Function] | [Token, Function] | DefinitionObject;\r\n\r\nexport type Constructor<T> = new (...args: any[]) => T;\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isFunction(arg: any): arg is Function {\r\n\treturn typeof arg === 'function';\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isObject(arg: any): arg is Object {\r\n\treturn arg && typeof arg === 'object';\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isString(arg: any): arg is string {\r\n\treturn typeof arg === 'string';\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isSymbol(arg: any): arg is symbol {\r\n\treturn typeof arg === 'symbol';\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isToken(arg: any): arg is Token {\r\n\treturn isFunction(arg) || isObject(arg) || isString(arg) || isSymbol(arg);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isReactComponent(prototype: any) {\r\n\treturn isObject(prototype) && isObject(prototype.isReactComponent);\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function isValidMetadata(arg: any): arg is Function {\r\n\treturn isFunction(arg) && [Object, Function, Number, String, Boolean].indexOf(arg) === -1;\r\n}\r\n","import { Component, createContext } from 'react';\r\nimport { logNotFoundDependency } from './errors';\r\nimport { Token } from './types';\r\n\r\n/* istanbul ignore next */\r\nexport const INJECTOR: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__injector__') as any;\r\n\r\ninterface InjectedInstance {\r\n\t[INJECTOR]?: Injector;\r\n}\r\n\r\ntype InjectorContextType = { injector?: Injector };\r\n\r\n/** React Context for Injector */\r\nexport const InjectorContext = createContext<InjectorContextType>({});\r\nif (__DEV__) {\r\n\tInjectorContext.displayName = 'InjectorContext';\r\n}\r\n\r\n/**\r\n * Dependency injection container\r\n * @internal\r\n */\r\nexport abstract class Injector<P = {}> extends Component<P> {\r\n\t_parent?: Injector;\r\n\r\n\t_bindingMap!: Map<Token, Function>;\r\n\r\n\t_instanceMap!: Map<Token, Object>;\r\n\r\n\tabstract _initInstance(instance: Object): void;\r\n}\r\n\r\n/**\r\n * Find Injector for passed object and cache it inside this object\r\n * @internal\r\n * @param {Object} target The object in which we inject value\r\n * @returns {Injector}\r\n */\r\nexport function getInjector(target: Object) {\r\n\tlet injector = (target as InjectedInstance)[INJECTOR];\r\n\tif (injector) {\r\n\t\treturn injector;\r\n\t}\r\n\tinjector = currentInjector || ((target as Component).context as InjectorContextType)?.injector;\r\n\tif (injector instanceof Injector) {\r\n\t\t(target as InjectedInstance)[INJECTOR] = injector;\r\n\t\treturn injector;\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nlet currentInjector: Injector | null = null;\r\n\r\n/**\r\n * Resolve a class instance that registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @internal\r\n * @param {Injector} injector Injector instance\r\n * @param {Token} token Dependency injection token\r\n * @returns {Object} Resolved class instance\r\n */\r\nexport function getInstance(injector: Injector | undefined, token: Token) {\r\n\tif (registrationQueue.length > 0) {\r\n\t\tregistrationQueue.forEach(registration => {\r\n\t\t\tregistration();\r\n\t\t});\r\n\t\tregistrationQueue.length = 0;\r\n\t}\r\n\twhile (injector) {\r\n\t\tlet instance = injector._instanceMap.get(token)!;\r\n\t\tif (instance !== undefined) {\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t\tconst binding = injector._bindingMap.get(token);\r\n\t\tif (binding) {\r\n\t\t\tconst prevInjector = currentInjector;\r\n\t\t\tcurrentInjector = injector;\r\n\t\t\ttry {\r\n\t\t\t\tinstance = binding(injector);\r\n\t\t\t} finally {\r\n\t\t\t\tcurrentInjector = prevInjector;\r\n\t\t\t}\r\n\t\t\tinjector._instanceMap.set(token, instance);\r\n\t\t\tinjector._initInstance(instance);\r\n\t\t\treturn instance;\r\n\t\t}\r\n\t\tinjector = injector._parent;\r\n\t}\r\n\tif (__DEV__) {\r\n\t\tlogNotFoundDependency(token);\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const registrationQueue: (() => void)[] = [];\r\n","import 'reflect-metadata';\r\nimport { InjectorContext, getInjector, getInstance } from './injector';\r\nimport { isValidMetadata, isReactComponent, isFunction, Constructor, Token } from './types';\r\nimport { getDebugName, logInvalidMetadata, logNotFoundProvider, logError } from './errors';\r\nimport { ComponentClass } from 'react';\r\n\r\n/**\r\n * Property decorator that resolves a class instance\r\n * which registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @param token Dependency injection token\r\n * @returns Property decorator\r\n */\r\nexport function inject(token?: Token): PropertyDecorator;\r\n\r\n/**\r\n * Property decorator that resolves a class instance\r\n * which registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n */\r\nexport function inject(target: Object, key: string | symbol): void;\r\n/**\r\n * Create a class instance that registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @param target The object in which we inject class instance\r\n * @param token Dependency injection token\r\n * @returns Resolved class instance\r\n */\r\nexport function inject<T>(target: Object, token: Constructor<T> | Token): T;\r\n\r\nexport function inject<T>(targetOrToken?: Object | Token, keyOrToken?: string | symbol | Token | Constructor<T>) {\r\n\tif (isFunction(keyOrToken)) {\r\n\t\treturn injectFunction(targetOrToken as Object, keyOrToken);\r\n\t}\r\n\r\n\tlet token = targetOrToken as Object;\r\n\tif (!keyOrToken) {\r\n\t\treturn injectDecorator;\r\n\t}\r\n\treturn injectDecorator(token, keyOrToken as string | symbol);\r\n\r\n\tfunction injectDecorator(prototype: Object, key: string | symbol) {\r\n\t\tif (__DEV__) {\r\n\t\t\tdefineContextType(prototype);\r\n\t\t} else {\r\n\t\t\t(prototype.constructor as ComponentClass).contextType = InjectorContext;\r\n\t\t}\r\n\r\n\t\tif (!token) {\r\n\t\t\ttoken = Reflect.getMetadata('design:type', prototype, key);\r\n\t\t\tif (__DEV__) {\r\n\t\t\t\tif (!isValidMetadata(token)) {\r\n\t\t\t\t\tlogInvalidMetadata(targetOrToken as Object, token);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst descriptor = {\r\n\t\t\tconfigurable: true,\r\n\t\t\tenumerable: true,\r\n\t\t\tget() {\r\n\t\t\t\tconst instance = injectFunction(this, token);\r\n\t\t\t\tObject.defineProperty(this, key, {\r\n\t\t\t\t\tenumerable: true,\r\n\t\t\t\t\twritable: true,\r\n\t\t\t\t\tvalue: instance\r\n\t\t\t\t});\r\n\t\t\t\treturn instance;\r\n\t\t\t},\r\n\t\t\tset(instance: Object) {\r\n\t\t\t\tObject.defineProperty(this, key, {\r\n\t\t\t\t\tenumerable: true,\r\n\t\t\t\t\twritable: true,\r\n\t\t\t\t\tvalue: instance\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tObject.defineProperty(prototype, key, descriptor);\r\n\r\n\t\treturn descriptor;\r\n\t}\r\n}\r\n\r\n/**\r\n * Resolve a class instance that registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @internal\r\n * @param {Object} target The object in which we inject class instance\r\n * @param {Token} token Dependency injection token\r\n * @returns {Object} Resolved class instance\r\n */\r\nfunction injectFunction(target: Object, token: Token) {\r\n\tconst injector = getInjector(target);\r\n\tif (__DEV__) {\r\n\t\tif (!injector) {\r\n\t\t\tlogNotFoundProvider(target);\r\n\t\t}\r\n\t}\r\n\treturn getInstance(injector, token);\r\n}\r\n\r\n/**\r\n * Set Class.contextType = InjectorContext\r\n * @internal\r\n * @param {Object} prototype React Component prototype\r\n */\r\nfunction defineContextType(prototype: Object) {\r\n\tif (isReactComponent(prototype)) {\r\n\t\tconst constructor = prototype.constructor;\r\n\t\tconst className = getDebugName(constructor);\r\n\t\tif ((constructor as ComponentClass).contextType !== InjectorContext) {\r\n\t\t\tif ((constructor as ComponentClass).contextType) {\r\n\t\t\t\tlogError(`Decorator tries to overwrite existing ${className}.contextType`);\r\n\t\t\t} else {\r\n\t\t\t\tObject.defineProperty(constructor, 'contextType', {\r\n\t\t\t\t\tget() {\r\n\t\t\t\t\t\treturn InjectorContext;\r\n\t\t\t\t\t},\r\n\t\t\t\t\tset() {\r\n\t\t\t\t\t\tlogError(`You are trying to overwrite ${className}.contextType = InjectorContext`);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import { INJECTOR, getInstance, Injector } from './injector';\r\nimport { isFunction, isToken, Token, Constructor, Definition, DefinitionObject } from './types';\r\nimport { logIncorrectBinding, logError, getDebugName } from './errors';\r\n\r\nconst IS_BINDING: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__binding__') as any;\r\ninterface BindingMark {\r\n\t[IS_BINDING]?: boolean;\r\n}\r\ntype BindingFunction = ((injector: Injector) => any) & BindingMark;\r\n\r\ninterface InjectedInstance {\r\n\t[INJECTOR]?: Injector;\r\n}\r\n/**\r\n * Bind type to specified class.\r\n * @param constructor Service constructor\r\n * @returns Dependency resolver\r\n */\r\nexport function toClass<T>(constructor: Constructor<T>) {\r\n\tif (__DEV__) {\r\n\t\tif (!isFunction(constructor)) {\r\n\t\t\tlogError(`Class ${getDebugName(constructor)} is not a valid dependency`);\r\n\t\t}\r\n\t}\r\n\treturn asBinding(injector => {\r\n\t\tconst instance = new constructor() as InjectedInstance;\r\n\t\tif (!instance[INJECTOR]) {\r\n\t\t\tinstance[INJECTOR] = injector;\r\n\t\t}\r\n\t\treturn instance;\r\n\t});\r\n}\r\n\r\n/**\r\n * Bind dependency to specified factory funciton.\r\n * @param factory Factory\r\n * @returns Dependency resolver\r\n */\r\nexport function toFactory<T>(factory: () => T): Function;\r\n/**\r\n * Bind dependency to specified factory funciton.\r\n * @param deps Factory dependencies\r\n * @param factory Factory\r\n * @returns Dependency resolver\r\n */\r\nexport function toFactory<T extends [any, ...any[]]>(deps: { [K in keyof T]: Constructor<T[K]> | Token }, factory: (...args: T) => any): Function;\r\nexport function toFactory(depsOrFactory?: any, factory?: any) {\r\n\tif (__DEV__) {\r\n\t\tif (factory) {\r\n\t\t\tif (!Array.isArray(depsOrFactory)) {\r\n\t\t\t\tlogError(`Dependency array ${getDebugName(depsOrFactory)} is invalid`);\r\n\t\t\t}\r\n\t\t\tif (!isFunction(factory)) {\r\n\t\t\t\tlogError(`Factory ${getDebugName(factory)} is not a valid dependency`);\r\n\t\t\t}\r\n\t\t} else if (!isFunction(depsOrFactory)) {\r\n\t\t\tlogError(`Factory ${getDebugName(depsOrFactory)} is not a valid dependency`);\r\n\t\t}\r\n\t}\r\n\treturn asBinding(factory ? injector => factory(...depsOrFactory.map((token: Token) => getInstance(injector, token))) : depsOrFactory);\r\n}\r\n\r\n/**\r\n * Bind type to specified value.\r\n * @param  value\r\n * @returns Dependency resolver\r\n */\r\nexport function toValue(value: any) {\r\n\tif (__DEV__) {\r\n\t\tif (value === undefined) {\r\n\t\t\tlogError(`Please specify some value`);\r\n\t\t}\r\n\t}\r\n\treturn asBinding(() => value);\r\n}\r\n\r\n/**\r\n * Bind type to existing instance located by token.\r\n * @param {Token} token\r\n * @return Dependency resolver\r\n */\r\nexport function toExisting(token: Token) {\r\n\tif (__DEV__) {\r\n\t\tif (!isFunction(token)) {\r\n\t\t\tlogError(`Token ${getDebugName(token)} is not a valid dependency injection token`);\r\n\t\t}\r\n\t}\r\n\treturn asBinding(injector => getInstance(injector, token));\r\n}\r\n\r\n/**\r\n * Mark function as binding function.\r\n * @internal\r\n * @param {Function} binding\r\n * @returns {Function}\r\n */\r\nfunction asBinding(binding: BindingFunction): Function {\r\n\tbinding[IS_BINDING] = true;\r\n\treturn binding;\r\n}\r\n\r\n/**\r\n * Add bindings to bindings Map\r\n * @internal\r\n */\r\nexport function addBindings(bindingMap: Map<Token, Function>, definitions: Definition[]) {\r\n\tdefinitions.forEach(definition => {\r\n\t\tlet token, binding;\r\n\t\tif (typeof definition == 'object' && (definition as DefinitionObject).token && (definition as DefinitionObject).binding) {\r\n\t\t\ttoken = (definition as DefinitionObject).token;\r\n\t\t\tbinding = (definition as DefinitionObject).binding;\r\n\t\t}\r\n\t\tif (Array.isArray(definition)) {\r\n\t\t\t[token, binding = token] = definition;\r\n\t\t} else {\r\n\t\t\ttoken = binding = definition;\r\n\t\t}\r\n\t\tif (__DEV__) {\r\n\t\t\tif (!isToken(token) || !isFunction(binding)) {\r\n\t\t\t\tlogIncorrectBinding(token, binding as Object);\r\n\t\t\t}\r\n\t\t}\r\n\t\t// @ts-ignore\r\n\t\tbindingMap.set(token, binding[IS_BINDING] ? binding : toClass(binding));\r\n\t});\r\n}\r\n","import { createElement, ComponentType, ComponentClass } from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { Injector, InjectorContext, registrationQueue } from './injector';\r\nimport { addBindings } from './bindings';\r\nimport { isObject, isFunction, Definition, Token } from './types';\r\nimport { logError, getDebugName } from './errors';\r\n\r\ntype Provider = {\r\n\t/**\r\n\t * Register dependency injection bindings in scope of decorated class\r\n\t * @param definitions Dependency injection configuration\r\n\t * @returns Decorated constructor\r\n\t */\r\n\tregister(...definitions: Definition[]): void;\r\n};\r\n\r\ntype ProviderMixin<T> = T &\r\n\tProvider & {\r\n\t\tcontextType: typeof InjectorContext;\r\n\t\tWrappedComponent: T;\r\n\t};\r\n\r\nconst Initialized: unique symbol = (typeof Symbol === 'function' ? Symbol() : '__init__') as any;\r\nexport abstract class InjectedService {\r\n\t[Initialized]?: boolean;\r\n\tabstract initProvider(refresh: () => void): void;\r\n}\r\n/**\r\n * Decorator or HOC that register dependency injection bindings\r\n * in scope of decorated class\r\n * @param definitions Dependency injection configuration\r\n * @returns Decorator or HOC\r\n */\r\nexport const provider: (...definitions: Definition[]) => <P = {}>(target: ComponentType<P>) => ProviderMixin<ComponentType<P>> = (...definitions) => Wrapped => {\r\n\tconst bindingMap = new Map<Token, Function>();\r\n\r\n\taddBindings(bindingMap, definitions);\r\n\r\n\tclass Provider extends Injector {\r\n\t\t_parent = this.context?.injector;\r\n\t\t_bindingMap = bindingMap;\r\n\t\t_instanceMap = new Map();\r\n\t\tstate = { injector: this };\r\n\t\t_initInstance(instance: Object) {\r\n\t\t\tif (instance instanceof InjectedService && !instance[Initialized]) {\r\n\t\t\t\tinstance.initProvider(() => this.setState({ injector: this }));\r\n\t\t\t\tinstance[Initialized] = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcomponentDidMount() {\r\n\t\t\tthis._instanceMap.forEach(instance => {\r\n\t\t\t\tthis._initInstance(instance);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tcomponentWillUnmount() {\r\n\t\t\tthis._instanceMap.forEach(instance => {\r\n\t\t\t\tif (isObject(instance) && isFunction(instance.dispose)) {\r\n\t\t\t\t\tinstance.dispose();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\trender() {\r\n\t\t\treturn createElement(InjectorContext.Provider, { value: this.state }, createElement(Wrapped, this.props as any));\r\n\t\t}\r\n\r\n\t\tstatic WrappedComponent = Wrapped;\r\n\r\n\t\t/**\r\n\t\t * Register dependency injection bindings in scope of decorated class\r\n\t\t * @param {...Definition} definitions Dependency injection configuration\r\n\t\t */\r\n\t\tstatic register(...definitions: Definition[]) {\r\n\t\t\taddBindings(bindingMap, definitions);\r\n\t\t}\r\n\t}\r\n\r\n\tif (__DEV__) {\r\n\t\t(Provider as ComponentClass).displayName = `Provider(${Wrapped.displayName || Wrapped.name})`;\r\n\r\n\t\tObject.defineProperty(Provider, 'contextType', {\r\n\t\t\tget() {\r\n\t\t\t\treturn InjectorContext;\r\n\t\t\t},\r\n\t\t\tset() {\r\n\t\t\t\tlogError(`You are trying to overwrite ${(Provider as ComponentClass).displayName}.contextType = InjectorContext`);\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\tProvider.contextType = InjectorContext;\r\n\t}\r\n\r\n\t// static fields from component should be visible on the generated Consumer\r\n\treturn hoistNonReactStatics(Provider, Wrapped) as any;\r\n};\r\n\r\n/**\r\n * Decorator that lazily registers class in scope of specified Provider.\r\n * @param getProvider Lambda function that returns Provider\r\n * @param biding Dependency injection binding\r\n * @returns Decorator\r\n */\r\n\r\nexport const registerIn: <T extends Function>(getProvider: () => Provider, binding?: Function) => (target: T) => T = (getProvider, binding) => constructor => {\r\n\tregistrationQueue.push(() => {\r\n\t\tif (__DEV__) {\r\n\t\t\tconst provider = getProvider();\r\n\t\t\tif (!isFunction(provider) || !(provider.prototype instanceof Injector)) {\r\n\t\t\t\tlogError(`${getDebugName(provider)} is not a valid Provider. Please use:\\n` + `@registerIn(() => MyProvider)\\n` + `class ${getDebugName(constructor)} {}\\n`);\r\n\t\t\t} else {\r\n\t\t\t\tprovider.register(binding ? [constructor, binding] : constructor);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tgetProvider().register(binding ? [constructor, binding] : constructor);\r\n\t\t}\r\n\t});\r\n\treturn constructor;\r\n};\r\n","import { useContext, useRef } from \"react\";\r\nimport { InjectorContext, getInstance } from \"./injector\";\r\nimport { logNotFoundProvider } from \"./errors\";\r\nimport type { Token } from './types';\r\n\r\n/**\r\n * React hook for resolving a class instance that registered by some Provider in hierarchy.\r\n * Instance is cached in Provider that registers it's class.\r\n * @param  token Dependency injection token\r\n * @returns Resolved class instance\r\n */\r\nexport function useInstance(token:Token) {\r\n  const ref = useRef<Object|undefined>(undefined);\r\n  const injector = useContext(InjectorContext)?.injector;\r\n  if (__DEV__) {\r\n    if (!injector) {\r\n      logNotFoundProvider();\r\n    }\r\n  }\r\n  return ref.current || (ref.current = getInstance(injector, token));\r\n}\r\n\r\n/**\r\n * React hook for resolving a class instances that registered by some Provider in hierarchy.\r\n * Instances are cached in Provider that registers it's classes.\r\n * @param  tokens Dependency injection tokens\r\n * @returns Resolved class instances\r\n */\r\nexport function useInstances(...tokens:Token[]) {\r\n  const ref = useRef<(Object|undefined)[] |  null>(null);\r\n  const injector = useContext(InjectorContext)?.injector;\r\n  if (__DEV__) {\r\n    if (!injector) {\r\n      logNotFoundProvider();\r\n    }\r\n  }\r\n  return (\r\n    ref.current ||\r\n    (ref.current = tokens.map(token => getInstance(injector, token)))\r\n  );\r\n}\r\n","import { createElement, FC, /* useCallback, DependencyList, */ useRef, Fragment } from 'react';\r\nimport { Definition } from './ioc/types';\r\nimport { provider } from './ioc';\r\n\r\nconst ComponentWithService: FC = ({ children }) => createElement(Fragment, null, children);\r\n\r\nexport const ComponentWithServices: FC<{\r\n\tservices: Definition[];\r\n}> = ({ services, children }) => {\r\n\tconst ref = useRef(provider(...services)(ComponentWithService));\r\n\treturn createElement(ref.current, null, children);\r\n};\r\n"],"names":["isFunction","arg","isObject","INJECTOR","Symbol","InjectorContext","createContext","__extends","Component","getInjector","target","injector","currentInjector","context","Injector","getInstance","token","registrationQueue","length","forEach","registration","instance","_instanceMap","get","undefined","binding","_bindingMap","prevInjector","set","_initInstance","_parent","inject","targetOrToken","keyOrToken","injectFunction","injectDecorator","prototype","key","constructor","contextType","Reflect","getMetadata","descriptor","configurable","enumerable","this","Object","defineProperty","writable","value","IS_BINDING","toClass","asBinding","toFactory","depsOrFactory","factory","map","toValue","toExisting","addBindings","bindingMap","definitions","definition","Array","isArray","_a","Initialized","provider","_i","Wrapped","Map","_this","Provider","InjectedService","initProvider","setState","dispose","createElement","state","props","hoistNonReactStatics","registerIn","getProvider","push","register","useInstance","ref","useRef","useContext","current","useInstances","tokens","ComponentWithService","children","Fragment","ComponentWithServices","services"],"mappings":"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"}